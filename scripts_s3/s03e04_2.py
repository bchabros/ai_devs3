import osimport reimport anthropicfrom typing import List, Dictfrom loguru import loggerimport requestsfrom dotenv import load_dotenvfrom src.prompt.s03e04 import INITIAL_PROMPTfrom src.send_task import senddef fetch_text(url: str) -> str | None:    """Fetch text content from URL"""    logger.info(f"Fetching text from URL: {url}")    try:        response = requests.get(url)        response.encoding = 'utf-8'        return response.text    except Exception as e:        logger.error(f"Error fetching text: {e}")        return Nonedef query_api(endpoint: str, query: str, api_key: str) -> dict:    """Query the API endpoint with given query"""    try:        response = requests.post(            f"https://centrala.ag3nts.org/{endpoint}",            json={"apikey": api_key, "query": query}        )        return response.json()    except Exception as e:        logger.error(f"Error querying API: {e}")        return {"code": 1, "message": str(e)}def get_claude_response(messages: List[Dict[str, str]]) -> Dict:    client = anthropic.Client(api_key=os.getenv("ANTHROPIC_API_KEY"))    # Extract original system message    original_system_message = next(        (msg["content"] for msg in messages if msg["role"] == "system"), ""    )    # Build conversation history string    conversation_history = "\n\nPrevious conversation:\n"    for msg in messages:        if msg["role"] != "system":            conversation_history += f"{msg['role'].upper()}: {msg['content']}\n"    # Combine original system message with conversation history    enhanced_system_message = original_system_message + conversation_history    # Filter out system message from messages    chat_messages = [msg for msg in messages if msg["role"] != "system"]    response = client.messages.create(        model="claude-3-5-sonnet-latest",        max_tokens=1024,        system=enhanced_system_message,        messages=chat_messages,    )    content = response.content[0].text    action_match = re.search(r"ACTION:\s*(.+?)(?=REASONING:|$)", content, re.DOTALL)    reasoning_match = re.search(r"REASONING:\s*(.+?)(?=TARGET:|$)", content, re.DOTALL)    target_match = re.search(r"TARGET:\s*(.+?)(?=IS_FINAL:|$)", content, re.DOTALL)    is_final_match = re.search(r"IS_FINAL:\s*(true|false)", content, re.IGNORECASE)    return {        "action": action_match.group(1).strip() if action_match else None,        "reasoning": reasoning_match.group(1).strip() if reasoning_match else None,        "target": target_match.group(1).strip() if target_match else None,        "is_final": is_final_match.group(1).lower() == "true" if is_final_match else False    }def create_barbara_agent(max_iterations: int = 20):    # Initialize context    text_content = fetch_text("https://centrala.ag3nts.org/dane/barbara.txt")    messages = [        {            "role": "system",            "content": INITIAL_PROMPT        },        {            "role": "user",            "content": f"Here's what we know about Barbara from the note:\n{text_content}\nWhat's your first step to find her location?"        }    ]    queried_targets = set()  # Keep track of already queried names/places    iterations = 0    while iterations < max_iterations:        # Get next action from Claude        remaining = max_iterations - iterations        response = get_claude_response(messages)        logger.info(f"Iteration {iterations + 1}/{max_iterations}")        logger.info(f"Claude's reasoning: {response['reasoning']}")        if response['target'] in queried_targets:            messages.append({                "role": "user",                "content": f"We've already queried {response['target']}. Please try a different approach. Remember, you have {remaining} queries remaining."            })            continue        queried_targets.add(response["target"].strip().split()[0])        iterations += 1        # Query appropriate API        api_result = query_api(            response['action'],            response['target'].strip().strip().split()[0],            os.getenv("API_KEY")        )        logger.info(f"Request Results: {api_result['message']}")        # Add interaction to context        messages.extend([            {                "role": "assistant",                "content": f"ACTION: {response['action']}\nREASONING: {response['reasoning']}\nTARGET: {response['target']}\nIS_FINAL: {response['is_final']}"            },            {                "role": "user",                "content": f"Query result: {api_result['message']}\nWhat's your next step based on this information?"            }        ])        if response["is_final"]:            return response["target"]  # Return the final locationdef main():    load_dotenv()    final_location = create_barbara_agent()    logger.info(f"Final determined location: {final_location}")    # Send the answer    res = send(        url=f"{os.environ.get('CENTRALA_URL')}report",        apikey=os.getenv("API_KEY"),        answer=final_location,        task="loop"    )    print(f"Final result: {res}")if __name__ == "__main__":    # main()    res = send(        url=f"{os.environ.get('CENTRALA_URL')}report",        apikey=os.getenv("API_KEY"),        answer="ELBLAG",        task="loop"    )    print(f"Final result: {res}")