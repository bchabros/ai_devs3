import osfrom dotenv import load_dotenvfrom src.s_04.e_02 import convert_to_jsonlfrom src.send_task import send# Convert data into .jsonl data for fine-tuning in OpenAIconvert_to_jsonl('/Users/Chabi/Desktop/ai_devs/ai_devs_solution/data_s04e02/correct.txt',                 '/Users/Chabi/Desktop/ai_devs/ai_devs_solution/data_s04e02/incorrect.txt',                 '/Users/Chabi/Desktop/ai_devs/ai_devs_solution/data_s04e02/data.jsonl')import openaifrom typing import Listdef verify_entries(verify_file: str, api_key: str, model_name: str) -> List[str]:    """    Verify entries using OpenAI model and return only correct ones.    Args:        verify_file (str): Path to file containing entries to verify        api_key (str): OpenAI API key        model_name (str): Name of the fine-tuned model    Returns:        List[str]: List of correct entries    """    # Set up OpenAI client    openai.api_key = api_key    # Read entries from file    with open(verify_file, 'r') as f:        entries = f.read().strip().split('\n')    correct_entries = []    # Process each entry    for entry in entries:        try:            # Create messages for the API call            messages = [                {"role": "system", "content": "Classify input as either correct or incorrect."},                {"role": "user", "content": entry}            ]            # Make API call            response = openai.ChatCompletion.create(                model=model_name,                messages=messages,                temperature=0,  # Use deterministic output                max_tokens=10  # Short response needed            )            # Check if the response classifies the entry as correct            classification = response.choices[0].message.content.strip().lower()            if classification == "correct":                correct_entries.append(entry)        except Exception as e:            print(f"Error processing entry: {entry}")            print(f"Error message: {str(e)}")            continue    return correct_entriesdef format_output(entries: List[str]) -> None:    """    Format and print the correct entries.    Args:        entries (List[str]): List of correct entries to print    """    if not entries:        print("No correct entries found.")        return    print(f"Found {len(entries)} correct entries:")    for i, entry in enumerate(entries, 1):        print(f"{i}. {entry}")# Example usageif __name__ == "__main__":    load_dotenv()    # Configuration    # OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")    api_key = os.getenv("API_KEY")    endpoint = f'{os.getenv("CENTRALA_URL")}report'    # MODEL_NAME = "your-fine-tuned-model-name"    # VERIFY_FILE = "/Users/Chabi/Desktop/ai_devs/ai_devs_solution/data_s04e02/verify.txt"    #    # # Process entries    # correct_entries = verify_entries(VERIFY_FILE, API_KEY, MODEL_NAME)    #    # # Print results    # format_output(correct_entries)    res = send(endpoint, task="research", apikey=api_key, answer=["01", "02", "03", "10"])    print(res)