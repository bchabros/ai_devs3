import osimport threadingfrom flask import Flask, request, jsonifyfrom dotenv import load_dotenvfrom openai import OpenAIfrom loguru import loggerimport timeimport requestsimport subprocessfrom src.send_task import sendfrom src.prompt.s04e04 import SYSTEM_PROMPTload_dotenv()app = Flask(__name__)client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))def get_ngrok_url():    """Get the public URL from ngrok API"""    try:        response = requests.get("http://localhost:4040/api/tunnels")        public_url = response.json()["tunnels"][0]["public_url"]        return public_url    except Exception as e:        logger.error(f"Failed to get ngrok URL: {e}")        return Nonedef submit_url_to_centrala():    """Submit the ngrok URL to centrala after waiting for ngrok to start"""    time.sleep(5)  # Wait for ngrok to start    ngrok_url = get_ngrok_url()    if ngrok_url:        logger.info(f"Got ngrok URL: {ngrok_url}")        apikey = os.getenv("API_KEY")        endpoint = f'{os.getenv("CENTRALA_URL")}report'        try:            res = send(                url=endpoint,                apikey=apikey,                answer=f"{ngrok_url}/drone",                task="webhook"            )            logger.info(f"Submission response: {res}")        except Exception as e:            logger.error(f"Failed to submit URL: {e}")    else:        logger.error("Failed to get ngrok URL")@app.route('/drone', methods=['POST'])def process_instruction():    try:        data = request.get_json()        logger.info(f"Received instruction: {data}")        if not data or 'instruction' not in data:            logger.error("Missing instruction in request")            return jsonify({'error': 'Missing instruction'}), 400        logger.info(f"Sending to OpenAI: {data['instruction']}")        completion = client.chat.completions.create(            model="gpt-4o",            messages=[                {"role": "system", "content": SYSTEM_PROMPT},                {"role": "user", "content": f"Instrukcja lotu: {data['instruction']}"}            ],            temperature=0        )        raw_response = completion.choices[0].message.content        description = raw_response.strip().lower()        logger.info(f"Raw LLM response: {raw_response}")        logger.info(f"Processed description: {description}")        response = {            "description": description,            "debug_info": {                "instruction": data['instruction'],                "raw_response": raw_response            }        }        logger.info(f"Sending response: {response}")        return jsonify(response)    except Exception as e:        logger.error(f"Error processing request: {str(e)}", exc_info=True)        return jsonify({'error': str(e)}), 500def start_ngrok():    """Start ngrok in a subprocess"""    try:        subprocess.Popen(["ngrok", "http", "3000"])        logger.info("Started ngrok")    except Exception as e:        logger.error(f"Failed to start ngrok: {e}")if __name__ == '__main__':    # Start ngrok in a separate process    start_ngrok()    # Start URL submission in a separate thread    submission_thread = threading.Thread(target=submit_url_to_centrala)    submission_thread.start()    # Start Flask server    logger.info("Starting Flask server")    app.run(host='0.0.0.0', port=3000)