from PyPDF2 import PdfReaderfrom dotenv import load_dotenvfrom loguru import loggerimport fitzimport ioimport osimport base64from typing import List, Dictfrom dataclasses import dataclassfrom openai import OpenAIfrom PIL import Image@dataclassclass ImageContent:    image_number: int    description: str    extracted_text: str@dataclassclass PageContent:    page_number: int    text_content: str    images: List[ImageContent]class EnhancedPDFProcessor:    def __init__(self, api_key: str):        try:            self.client = OpenAI(api_key=api_key)            logger.info("OpenAI client successfully initialized.")        except Exception as e:            logger.error(f"Failed to initialize OpenAI client: {str(e)}")            raise    def process_image_with_vision(self, image: Image.Image) -> Dict[str, str]:        """Process image using OpenAI Vision API with enhanced prompt for text extraction"""        try:            img_byte_arr = io.BytesIO()            image.save(img_byte_arr, format='JPEG')            img_byte_arr = img_byte_arr.getvalue()            base64_image = base64.b64encode(img_byte_arr).decode('utf-8')            response = self.client.chat.completions.create(                model="gpt-4o",                messages=[                    {                        "role": "user",                        "content": [                            {                                "type": "text",                                "text": """Please analyze this image and provide two distinct sections:                                1. TEXT CONTENT: If there's any text in the image, provide it exactly as written.                                2. VISUAL DESCRIPTION: Describe the visual elements, layout, and any non-text content."""                            },                            {                                "type": "image_url",                                "image_url": {                                    "url": f"data:image/jpeg;base64,{base64_image}"                                }                            }                        ]                    }                ],                max_tokens=1000            )            return {                "description": response.choices[0].message.content            }        except Exception as e:            logger.error(f"Error processing image with Vision API: {str(e)}")            return {                "description": f"Error processing image: {str(e)}"            }    @staticmethod    def extract_images_from_page(pdf_document, page_num: int) -> List[Image.Image]:        """Extract all images from a PDF page"""        images = []        page = pdf_document[page_num]        image_list = page.get_images(full=True)        for img_index, img_info in enumerate(image_list):            try:                xref = img_info[0]                base_image = pdf_document.extract_image(xref)                image_bytes = base_image["image"]                image = Image.open(io.BytesIO(image_bytes))                if hasattr(image, 'n_frames') and image.n_frames > 1:                    for frame in range(image.n_frames):                        image.seek(frame)                        frame_image = image.copy()                        images.append(frame_image)                else:                    images.append(image)            except Exception as e:                logger.error(f"Error extracting image {img_index} from page {page_num + 1}: {str(e)}")                continue        return images    def process_pdf(self, pdf_path: str) -> List[PageContent]:        """Process PDF file and extract all content including nested images"""        logger.info(f"Starting to process PDF: {pdf_path}")        pages_content = []        pdf_reader = PdfReader(pdf_path)        pdf_document = fitz.open(pdf_path)        for i in range(len(pdf_reader.pages)):            page = pdf_reader.pages[i]            text_content = page.extract_text()            logger.info(f"Extracted text content from page {i + 1}")            images = self.extract_images_from_page(pdf_document, i)            logger.info(f"Extracted {len(images)} images from page {i + 1}")            image_contents = []            for img_num, image in enumerate(images, 1):                vision_result = self.process_image_with_vision(image)                image_content = ImageContent(                    image_number=img_num,                    description=vision_result["description"],                    extracted_text=""                )                image_contents.append(image_content)                logger.info(f"Processed image {img_num} from page {i + 1}")            page_content = PageContent(                page_number=i + 1,                text_content=text_content,                images=image_contents            )            pages_content.append(page_content)            logger.success(f"Successfully processed content for page {i + 1}")        pdf_document.close()        return pages_content    @staticmethod    def save_to_text(pages_content: List[PageContent], output_path: str):        """Save extracted content to formatted text file"""        with open(output_path, 'w', encoding='utf-8') as f:            for page in pages_content:                f.write("=" * 80 + "\n")                f.write(f"PAGE {page.page_number}\n")                f.write("-" * 80 + "\n\n")                f.write("TEXT CONTENT:\n")                f.write("-" * 12 + "\n")                f.write(page.text_content.strip() + "\n\n")                if page.images:                    f.write("IMAGES:\n")                    f.write("-" * 6 + "\n")                    for img in page.images:                        f.write(f"Image {img.image_number}:\n")                        f.write("Description:\n")                        f.write(img.description.strip() + "\n")                        if img.extracted_text:                            f.write("Extracted Text:\n")                            f.write(img.extracted_text.strip() + "\n")                        f.write("\n")                f.write("\n")def main():    load_dotenv()    api_key = os.getenv('OPENAI_API_KEY')    if not api_key:        raise ValueError("OpenAI API key not found in environment variables")    processor = EnhancedPDFProcessor(api_key)    pdf_path = "/Users/Chabi/Desktop/ai_devs/notatnik-rafala.pdf"    output_path = '/Users/Chabi/Desktop/ai_devs/ai_devs_solution/data/s04e05/data.txt'    try:        pages_content = processor.process_pdf(pdf_path)        processor.save_to_text(pages_content, output_path)        logger.success(f"Successfully processed PDF and saved content to {output_path}")    except Exception as e:        logger.error(f"Error processing PDF: {str(e)}")if __name__ == "__main__":    main()