import loggingimport jsonimport argparseimport timeimport asynciofrom src.s_05.e_03 import QuestionsAgentasync def async_main(test_mode: bool = False):    print("\n1. Initializing QuestionsAgent...")    agent = QuestionsAgent()    try:        print("\n2. Getting token and signature...")        start_time = time.perf_counter()        signature, challenges, timestamp = agent.get_token()        print("\n3. Fetching source data in parallel...")        sources_data = await agent.fetch_all_sources(challenges)        print("\n4. Processing sources in parallel...")        all_answers = await agent.process_all_sources(sources_data)        end_time = time.perf_counter()        execution_time = end_time - start_time        print(f"\n5. Final answers (execution time: {execution_time:.3f} seconds):")        print(json.dumps(all_answers, indent=2, ensure_ascii=False))        if not test_mode:            print("\n6. Submitting answers to endpoint...")            result = agent.submit_answers(all_answers, signature, timestamp)            print("\n7. Final result:")            print(json.dumps(result, indent=2, ensure_ascii=False))        else:            print("\nTest mode: Skipping submission to endpoint")    except Exception as e:        logging.error(f"Error in main execution: {e}")        raisedef main():    parser = argparse.ArgumentParser()    parser.add_argument('--test', action='store_true', help='Run in test mode without submitting answers')    args = parser.parse_args()    asyncio.run(async_main(args.test))if __name__ == "__main__":    main()