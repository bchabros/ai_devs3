import osimport threadingfrom flask import Flask, request, jsonifyfrom dotenv import load_dotenvfrom openai import OpenAIfrom loguru import loggerimport subprocessimport jsonfrom src.s_05.e_04 import ToolProcessor, submit_url_to_centralaload_dotenv()app = Flask(__name__)client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))# Global variablesconversation_history = []context_variables = {}@app.route('/serce', methods=['POST'])def process_instruction():    try:        data = request.get_json()        # Enhanced request logging        logger.info("\n=== Incoming Request Details ===")        logger.info(f"Headers: {json.dumps(dict(request.headers), indent=2)}")        logger.info(f"Body: {json.dumps(data, indent=2)}")        logger.info("=== End Request Details ===\n")        conversation_history.append({            "role": "user",            "content": data        })        processor = ToolProcessor()        if "question" in data:            tool_choice = processor.select_tool(data["question"])            # Enhanced processing logging            logger.info("\n=== Processing Details ===")            logger.info(f"Question: {data['question']}")            logger.info(f"Selected Tool: {tool_choice['tool']}")            logger.info(f"Thinking Process: {tool_choice['thinking']}")            result = processor.process(tool_choice["tool"], data)            logger.info(f"Processing Result: {result}")            logger.info("=== End Processing Details ===\n")        else:            result = "Nieznany typ zapytania"            logger.info("No question provided, using default response")        response = {            "answer": result        }        conversation_history.append({            "role": "assistant",            "content": response["answer"]        })        # Enhanced response logging        logger.info("\n=== Outgoing Response Details ===")        logger.info(f"Response: {json.dumps(response, indent=2)}")        logger.info("=== End Response Details ===\n")        return jsonify(response)    except Exception as e:        logger.error("\n=== Error Processing Request ===")        logger.error(f"Error type: {type(e).__name__}")        logger.error(f"Error message: {str(e)}")        logger.exception("Full exception details:")        logger.error("=== End Error Details ===\n")        return jsonify({"answer": f"Error: {str(e)}"}), 500def start_ngrok():    """Start ngrok in a subprocess"""    try:        subprocess.Popen(["ngrok", "http", "3000"])        logger.info("Started ngrok")    except Exception as e:        logger.error(f"Failed to start ngrok: {e}")if __name__ == '__main__':    start_ngrok()    submission_thread = threading.Thread(target=submit_url_to_centrala)    submission_thread.start()    logger.info("Starting Flask S05E04 server")    app.run(host='0.0.0.0', port=3000)